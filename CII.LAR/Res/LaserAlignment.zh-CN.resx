<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StrAlignLaser" xml:space="preserve">
    <value>开始校准</value>
  </data>
  <data name="StrFinish" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="StrNext" xml:space="preserve">
    <value>下一步</value>
  </data>
  <data name="StrPreSet0" xml:space="preserve">
    <value>
请在视野范围内移走所有的胚胎。

请放置一个空的培养皿或玻璃片在显微镜的载物台上。</value>
  </data>
  <data name="StrPreSet1" xml:space="preserve">
    <value>指示激光已开启，请确认屏幕上已出现清晰明亮的光点。
如有需要，请调节显微镜对焦旋钮，使指示激光点在屏幕上显示得尽可能小；
如果光点不够明亮，请使用激光器旋钮调节激光强度，或降低显微镜光源强度。
点击“开始校准”。</value>
  </data>
  <data name="StrSave" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="StrStepComplete" xml:space="preserve">
    <value>
激光的校准已经完成。

点击“完成”保存校准结果</value>
  </data>
  <data name="StrStepFive" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrStepFour" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrStepOne" xml:space="preserve">
    <value>点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。
点击“下一步”。</value>
  </data>
  <data name="StrStepSeven" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrStepSix" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrStepThree" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrStepTitleComplete" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="StrStepTitleFive" xml:space="preserve">
    <value>步骤五</value>
  </data>
  <data name="StrStepTitleFour" xml:space="preserve">
    <value>步骤四</value>
  </data>
  <data name="StrStepTitleOne" xml:space="preserve">
    <value>步骤一</value>
  </data>
  <data name="StrStepTitleSeven" xml:space="preserve">
    <value>步骤七</value>
  </data>
  <data name="StrStepTitleSix" xml:space="preserve">
    <value>步骤六</value>
  </data>
  <data name="StrStepTitleThree" xml:space="preserve">
    <value>步骤三</value>
  </data>
  <data name="StrStepTitleTwo" xml:space="preserve">
    <value>步骤二</value>
  </data>
  <data name="StrStepTwo" xml:space="preserve">
    <value>现在指示激光已小量移动

点击指示激光点中心，指示激光点将被放大，再次点击放大后的指示激光点中心。

点击“下一步”。</value>
  </data>
  <data name="StrTitle" xml:space="preserve">
    <value>激光位置校准</value>
  </data>
</root>